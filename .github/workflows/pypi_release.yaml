name: PyPI Release
on:
  push:
    tags:
      # Trigger on version tags (e.g., v1.0.0)
      - "v*.*.*"
      - "*.*.*"
      # Trigger on pre-release tags (e.g., v1.0.0-alpha.1)
      - "v*.*.*-*"
      - "*.*.*-*"

env:
  # package name
  PYPI_NAME: qc-procrustes

jobs:
  build:
    name: Build and Test Distribution
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        # os: [ubuntu-latest, macos-latest, windows-latest]
        os: [ubuntu-latest]
        # python-version: ["3.9", "3.10", "3.11", "3.12"]
        python-version: ["3.13"]
    outputs:
      os: ${{ matrix.os }}
      python-version: ${{ matrix.python-version }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
        #   python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build pytest pytest-cov codecov
          python -m pip install -r requirements.txt
          python -m pip install -r requirements_dev.txt
      - name: Test package
        run: |
          python -m pytest -c pyproject.toml --cov-config=.coveragerc --cov-report=xml --color=yes procrustes
      - name: Build package
        run: python -m build
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          # Name of the artifact to upload, unique for each OS and Python version
          name: python-package-distributions
          path: dist/
          # Optional parameters for better artifact management
          overwrite: false
          include-hidden-files: false

  publish-to-pypi:
    name: Publish Python distribution to PyPI
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: PyPI-Release
      url: https://pypi.org/p/${{ env.PYPI_NAME }}
    permissions:
      id-token: write

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

  github-release:
    name: Sign and Upload Python Distribution to GitHub Release
    needs:
      - build
      - publish-to-pypi
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v3.0.0
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >
          gh release create
          '${{ github.ref_name }}'
          --repo '${{ github.repository }}'
          --notes ""
      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >
          gh release upload
          '${{ github.ref_name }}' dist/**
          --repo '${{ github.repository }}'

  publish-none-pypi:
    name: Publish Python distribution to TestPyPI (none)
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: TestPyPI
      url: https://test.pypi.org/p/${{ env.PYPI_NAME }}
    permissions:
      id-token: write

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution with relaxed constraints
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
